daemon              off;
pcre_jit            on;
timer_resolution    100ms;
worker_processes    ${WORKERS:=1};
pid                 /srv/nginx.pid;

error_log           stderr  ${ERROR_LOG_LEVEL=info};

events {
    worker_connections  ${WORKER_CONNECTIONS:=1024};
}

http {
    log_format  json  escape=json  '{'
        '"method":"$$request_method",'
        '"uri":"$$uri",'
        '"response_status":$$status,'
        '"request_time":$$request_time,'
        '"xlog":"$$xlog"}';

    types {
        application/json     json;
        text/css             css;
        text/plain           txt;
        text/html            html htm shtml;
        image/jpeg           jpeg jpg;
        image/png            png;
        image/webp           webp;
        image/svg+xml        svg;
    }

    sendfile                            on;
    tcp_nopush                          on;
    tcp_nodelay                         on;
    server_tokens                       off;
    reset_timedout_connection           on;

    send_timeout                        15;
    keepalive_timeout                   75;
    client_body_timeout                 15;
    client_max_body_size                ${CLIENT_MAX_BODY_SIZE:=1m};
    client_body_buffer_size             ${CLIENT_BODY_BUFFER_SIZE:=1m};
    client_body_temp_path               /tmp/nginx-client-body;
    proxy_temp_path                     /tmp/nginx-proxy;

    resolver_timeout                    5s;
    resolver                            ${RESOLVER}  1.1.1.1  8.8.8.8  valid=60s  ipv6=off;

    gzip                                on;

    lua_ssl_verify_depth                2;
    lua_ssl_trusted_certificate         /etc/ssl/certs/ca-certificates.crt;
    lua_socket_pool_size                ${LUA_SOCKET_POOL_SIZE:=2048};
    lua_malloc_trim                     ${LUA_MALLOC_TRIM:=1024};
    lua_code_cache                      ${LUA_CODE_CACHE};
    lua_socket_log_errors               off;
    lua_need_request_body               off;

    lua_shared_dict                     CertCache  ${CERT_CACHE_SIZE:=8m};

    init_by_lua_block {
        require'app.auth'
    }

    upstream  hasura {
        server      hasura:8080;
        keepalive   2;
    }

    server {
        listen                      80;
        listen                      443  ssl  http2;
        server_name                 ${SERVER_NAME:=_};

        ssl_dhparam                 /usr/local/openresty/nginx/conf/cert/dhparam.pem;
        ssl_certificate             /usr/local/openresty/nginx/conf/cert/cert.pem;
        ssl_certificate_key         /usr/local/openresty/nginx/conf/cert/key.pem;
        ssl_protocols               TLSv1.3;
        ssl_session_cache           shared:SSL:8m;
        ssl_session_timeout         15m;
        ssl_prefer_server_ciphers   on;
        ssl_ciphers                 EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;


        access_log                  /dev/stdout  json;
        set                         $$xlog  "";

        # location /v1/graphql {
        location ~ ^/(v1|v2|v1alpha1|console)/ {
            add_header          Content-Security-Policy  "upgrade-insecure-requests";
            add_header          Strict-Transport-Security  "max-age=15768000"  always;

            proxy_http_version  1.1;
            proxy_set_header    Connection  "";
            proxy_pass          http://hasura;
        }

        location = /auth/hasura {
            allow                   172.72.0.0/24;
            deny                    all;
            default_type            "application/json; charset=utf-8";
            content_by_lua          "require'app.auth'.getAuth()";
            lua_need_request_body   on;
        }

        location /.well-known/acme-challenge/ {}
    }
}
