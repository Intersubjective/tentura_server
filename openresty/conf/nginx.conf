daemon                      off;
pcre_jit                    on;
timer_resolution            100ms;
worker_processes            ${WORKERS:=auto};
pid                         /var/run/openresty/nginx.pid;

error_log                   stderr  ${ERROR_LOG_LEVEL=info};

events {
    worker_connections      ${WORKER_CONNECTIONS:=1024};
}

http {
    gzip                    on;
    access_log              off;
    log_format              json  escape=json  '{'
        '"method":"$$request_method",'
        '"uri":"$$uri",'
        '"response_status":$$status,'
        '"request_time":$$request_time,'
        '"xlog":"$$xlog"}';

    types {
        application/json        json;
        text/css                css;
        text/plain              txt;
        text/html               html  htm  shtml;
        image/jpeg              jpeg  jpg;
        image/png               png;
        image/webp              webp;
        image/svg+xml           svg;
    }

    sendfile                    on;
    tcp_nopush                  on;
    tcp_nodelay                 on;
    server_tokens               off;
    reset_timedout_connection   on;

    send_timeout                15;
    keepalive_timeout           75;
    client_body_timeout         15;
    client_max_body_size        ${CLIENT_MAX_BODY_SIZE:=1m};
    client_body_buffer_size     ${CLIENT_BODY_BUFFER_SIZE:=1m};
    client_body_temp_path       /tmp/nginx-client-body;
    proxy_temp_path             /tmp/nginx-proxy;
    resolver_timeout            5s;
    resolver                    ${RESOLVER:=127.0.0.11}  valid=60s  ipv6=off;

    lua_code_cache              ${LUA_CODE_CACHE:=on};
    lua_socket_pool_size        ${LUA_SOCKET_POOL_SIZE:=2048};
    lua_socket_log_errors       off;
    lua_ssl_verify_depth        2;
    lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;

    init_by_lua_block {
        ngx.IS_PROD = '${ACME_EMAIL}' ~= ''
        require'app.jwt'.init(
            '${JWT_PUBLIC_PEM}',
            '${JWT_PRIVATE_PEM}',
            '${JWT_EXPIRE}')
        require'app.user'.init'${HASURA_GRAPHQL_ADMIN_SECRET}'
        if ngx.IS_PROD then
            require'resty.acme.autossl'.init{
                account_email = '${ACME_EMAIL}',
                account_key_path = '/etc/nginx/account_key.pem',
                domain_whitelist = {'${SERVER_NAME}'},
                domain_key_types = {'rsa','ecc'},
                storage_config = {dir='/etc/nginx/cert'},
                storage_adapter = 'file',
                tos_accepted = true,
                staging = false,
            }
        end
    }

    init_worker_by_lua_block {
        if ngx.IS_PROD then
            require'resty.acme.autossl'.init_worker()
        end
    }

    upstream  hasura {
        server      hasura:8080;
        keepalive   2;
    }

    server {
        listen                      80  default_server;
        server_name                 ${SERVER_NAME:=_};
        set                         $$xlog  "";

        location /.well-known/acme-challenge/ {
            content_by_lua_block {
                if ngx.IS_PROD then
                    require'resty.acme.autossl'.serve_http_challenge()
                end
            }
        }
        location / {
            return  301  https://$host$request_uri;
        }
    }

    server {
        listen                      443  ssl  http2  default_server;
        server_name                 ${SERVER_NAME:=_};
        set                         $$xlog  "";

        ssl_dhparam                 /etc/nginx/dhparam.pem;
        ssl_certificate             /etc/nginx/rsa_cert.pem;
        ssl_certificate_key         /etc/nginx/rsa_key.pem;
        ssl_certificate             /etc/nginx/ec_cert.pem;
        ssl_certificate_key         /etc/nginx/ec_key.pem;
        ssl_protocols               TLSv1.2  TLSv1.3;
        ssl_ecdh_curve              prime256v1:secp384r1;
        ssl_session_cache           shared:ssl:8m;
        ssl_session_timeout         15m;
        ssl_prefer_server_ciphers   on;
        ssl_ciphers                 HIGH:!aNULL:!MD5;

        ssl_certificate_by_lua_block {
            if ngx.IS_PROD then
                require'resty.acme.autossl'.ssl_certificate()
            end
        }

        location ${HASURA_LOCATION_OVERRIDE:== /v1/graphql} {
            proxy_http_version      1.1;
            proxy_set_header        Connection  "";
            proxy_pass              http://hasura;
            access_log              /dev/stdout  json;
        }

        location = /user/test {
            content_by_lua      "require'app.user'.test()";
        }
        location = /user/login {
            content_by_lua      "require'app.user'.serve'login'";
        }
        location = /user/register {
            content_by_lua      "require'app.user'.serve'register'";
        }
    }
}
