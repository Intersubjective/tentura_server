daemon                              off;
pcre_jit                            on;
timer_resolution                    100ms;
worker_processes                    {* os.getenv'WORKERS' or 'auto' *};
pid                                 /var/run/openresty/nginx.pid;

error_log                           stderr  {* os.getenv'ERROR_LOG_LEVEL' or 'info' *};

events  {
    worker_connections              {* os.getenv'WORKER_CONNECTIONS' or 1024 *};
}

http  {
    gzip                            on;
    access_log                      off;

    log_format                      json  escape=json  '{'
        '"method":"$request_method",'
        '"uri":"$uri",'
        '"response_status":$status,'
        '"request_time":$request_time,'
        '"xlog":"$xlog"}';

    types  {
        application/json            json;
        text/css                    css;
        text/plain                  txt;
        text/html                   html  htm  shtml;
        image/jpeg                  jpeg  jpg;
        image/png                   png;
        image/webp                  webp;
        image/svg+xml               svg;
    }

    sendfile                        on;
    tcp_nopush                      on;
    tcp_nodelay                     on;
    server_tokens                   off;
    reset_timedout_connection       on;

    send_timeout                    15;
    keepalive_timeout               75;
    client_body_timeout             15;
    client_max_body_size            {* os.getenv'CLIENT_MAX_BODY_SIZE' or '1m' *};
    client_body_buffer_size         {* os.getenv'CLIENT_BODY_BUFFER_SIZE' or '1m' *};
    client_body_temp_path           /tmp/nginx-client-body;
    proxy_temp_path                 /tmp/nginx-proxy;
    resolver_timeout                5s;
    resolver                        {* os.getenv'RESOLVER' or '127.0.0.11' *}  valid=60s  ipv6=off;

    lua_code_cache                  {* os.getenv'LUA_CODE_CACHE' or 'on' *};
    lua_socket_pool_size            {* os.getenv'LUA_SOCKET_POOL_SIZE' or 2048 *};
    lua_socket_log_errors           off;
    lua_ssl_verify_depth            2;
    lua_ssl_trusted_certificate     /etc/ssl/certs/ca-certificates.crt;

    ssl_trusted_certificate         /etc/ssl/certs/ca-certificates.crt;
    ssl_certificate                 /etc/nginx/rsa_cert.pem;
    ssl_certificate_key             /etc/nginx/rsa_key.pem;
    ssl_certificate                 /etc/nginx/ec_cert.pem;
    ssl_certificate_key             /etc/nginx/ec_key.pem;
    ssl_dhparam                     /etc/nginx/dhparam.pem;
    ssl_ecdh_curve                  prime256v1:secp384r1;
    ssl_session_cache               shared:ssl:8m;
    ssl_buffer_size                 8k;
    ssl_session_tickets             off;
    ssl_session_timeout             15m;
    ssl_stapling_verify             on;
    ssl_stapling                    on;
    ssl_prefer_server_ciphers       on;
    ssl_protocols                   TLSv1.3;
    ssl_ciphers                     ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;

    init_by_lua_block  {
        local ACME_EMAIL = '{* os.getenv"ACME_EMAIL" or "" *}'
        local SERVER_NAME = '{* os.getenv"SERVER_NAME" or "" *}'

        require'resty.template.safe'.caching('{* os.getenv"LUA_CODE_CACHE" *}' ~= 'off')
        require'app.jwt'.init(
            '{* os.getenv"JWT_PUBLIC_PEM" *}',
            '{* os.getenv"JWT_PRIVATE_PEM" *}',
            '{* os.getenv"JWT_EXPIRES_IN" *}'
        )
        require'app.gql'.init(
            '{* os.getenv"HASURA_URL" *}',
            '{* os.getenv"HASURA_GRAPHQL_ADMIN_SECRET" *}'
        )
        require'app.preview'
        require'app.user'


        if SERVER_NAME ~= '' and ACME_EMAIL ~= '' then
            ngx.USE_ACME = true
            require'resty.acme.autossl'.init{
                account_email = ACME_EMAIL,
                account_key_path = '/etc/nginx/account_key.pem',
                domain_whitelist = {SERVER_NAME},
                domain_key_types = {'rsa','ecc'},
                storage_config = {dir='/etc/nginx/cert'},
                storage_adapter = 'file',
                tos_accepted = true,
                staging = false,
            }
        end
    }

    init_worker_by_lua_block  {
        if ngx.USE_ACME then
            require'resty.acme.autossl'.init_worker()
        end
    }

    upstream  hasura  {
        server      hasura:8080;
        keepalive   2;
    }

    server  {
        listen                      80  default_server;
        server_name                 {* os.getenv'SERVER_NAME' or 'localhost' *};
        set                         $xlog  "";

        include                     /etc/nginx/acme.conf;
        include                     /etc/nginx/{* os.getenv"WITH_TEST_LOCATION" == 'true' and 'test' or 'empty' *}.conf;

        location  /  {
            return  301  https://$host$request_uri;
        }        
    }

    server  {
        http2                       on;
        listen                      443  ssl  default_server;
        server_name                 {* os.getenv'SERVER_NAME' or 'localhost' *};

        set                         $xlog  "";
        access_log                  /dev/stdout  json;

        ssl_certificate_by_lua_block  {
            if ngx.USE_ACME then
                require'resty.acme.autossl'.ssl_certificate()
            end
        }

        include                     /etc/nginx/app.conf;

        include                     /etc/nginx/acme.conf;

        location  /.well-known/  {}

        location  /static/  {
            alias                   html/;
        }

        location  {* os.getenv'HASURA_LOCATION_OVERRIDE' or '/' *}  {
            proxy_http_version      1.1;
            proxy_set_header        Connection  "";
            proxy_pass              http://hasura;
        }
    }
}
