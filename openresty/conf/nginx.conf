daemon                          off;
pcre_jit                        on;
timer_resolution                100ms;
worker_processes                {* os.getenv'WORKERS' or 'auto' *};
pid                             /var/run/openresty/nginx.pid;

error_log                       stderr  {* os.getenv'ERROR_LOG_LEVEL' or 'info' *};

events  {
    worker_connections          {* os.getenv'WORKER_CONNECTIONS' or 1024 *};
}

http  {
    gzip                        on;
    access_log                  off;

    include                     /etc/nginx/log_format.conf;
    include                     /etc/nginx/mime_types.conf;

    sendfile                    on;
    tcp_nopush                  on;
    tcp_nodelay                 on;
    server_tokens               off;
    reset_timedout_connection   on;

    send_timeout                15;
    keepalive_timeout           75;
    client_body_timeout         15;
    client_max_body_size        {* os.getenv'CLIENT_MAX_BODY_SIZE' or '1m' *};
    client_body_buffer_size     {* os.getenv'CLIENT_BODY_BUFFER_SIZE' or '1m' *};
    client_body_temp_path       /tmp/nginx-client-body;
    proxy_temp_path             /tmp/nginx-proxy;
    resolver_timeout            5s;
    resolver                    {* os.getenv'RESOLVER' or '127.0.0.11' *}  valid=60s  ipv6=off;

    lua_code_cache              {* os.getenv'LUA_CODE_CACHE' or 'on' *};
    lua_socket_pool_size        {* os.getenv'LUA_SOCKET_POOL_SIZE' or 2048 *};
    lua_socket_log_errors       off;
    lua_ssl_verify_depth        2;
    lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;

    init_by_lua_block  {
        require'app.jwt'.init(
            '{* os.getenv"JWT_PUBLIC_PEM" *}',
            '{* os.getenv"JWT_PRIVATE_PEM" *}',
            '{* os.getenv"JWT_EXPIRES_IN" *}')
        require'app.gql'.init(
            '{* os.getenv"HASURA_URL" *}',
            '{* os.getenv"HASURA_GRAPHQL_ADMIN_SECRET" *}')

        local ACME_EMAIL = '{* os.getenv"ACME_EMAIL" *}'
        local SERVER_NAME = '{* os.getenv"SERVER_NAME" *}'
        ngx.USE_ACME = SERVER_NAME and ACME_EMAIL

        if ngx.USE_ACME then
            require'resty.acme.autossl'.init{
                account_email = ACME_EMAIL,
                account_key_path = '/etc/nginx/account_key.pem',
                domain_whitelist = {SERVER_NAME},
                domain_key_types = {'rsa','ecc'},
                storage_config = {dir='/etc/nginx/cert'},
                storage_adapter = 'file',
                tos_accepted = true,
                staging = false,
            }
        end
    }

    init_worker_by_lua_block  {
        if ngx.USE_ACME then
            require'resty.acme.autossl'.init_worker()
        end
    }

    upstream  hasura  {
        server      hasura:8080;
        keepalive   2;
    }

    server  {
        listen                      80  default_server;
        server_name                 {* os.getenv'SERVER_NAME' or '_' *};
        set                         $xlog  "";

        include                     /etc/nginx/location_acme.conf;

        location  /  {
            return  301  https://$host$request_uri;
        }
    }

    server  {
        listen                      443  ssl  default_server;
        server_name                 {* os.getenv'SERVER_NAME' or '_' *};

        http2                       on;

        set                         $xlog  "";
        access_log                  /dev/stdout  json;

        ssl_dhparam                 /etc/nginx/dhparam.pem;
        ssl_certificate             /etc/nginx/rsa_cert.pem;
        ssl_certificate_key         /etc/nginx/rsa_key.pem;
        ssl_certificate             /etc/nginx/ec_cert.pem;
        ssl_certificate_key         /etc/nginx/ec_key.pem;
        ssl_protocols               TLSv1.3;
        ssl_ecdh_curve              prime256v1:secp384r1;
        ssl_session_cache           shared:ssl:8m;
        ssl_session_timeout         15m;
        ssl_prefer_server_ciphers   on;
        ssl_ciphers                 HIGH:!aNULL:!MD5;

        ssl_certificate_by_lua_block  {
            if ngx.USE_ACME then
                require'resty.acme.autossl'.ssl_certificate()
            end
        }

        location  ~*  "^/images/(\S+)/(\S+)\.jpg$"  {
            root                    /srv;
            client_body_temp_path   /srv;
            create_full_put_path    on;
            min_delete_depth        2;
            dav_methods             PUT DELETE;
            dav_access              group:rw  all:r;
            access_by_lua           "require'app.jwt'.check_access()";
        }

        location  =  /user/login  {
            content_by_lua          "require'app.user'.login()";
        }

        location  =  /user/register  {
            content_by_lua          "require'app.user'.register()";
        }

        {* os.getenv'WITH_TEST_LOCATION' and 'include  /etc/nginx/location_test.conf;' or '' *}

        include                     /etc/nginx/location_acme.conf;

        location  /.well-known/  {}

        location  {* os.getenv'HASURA_LOCATION_OVERRIDE' or '/' *}  {
            proxy_http_version      1.1;
            proxy_set_header        Connection  "";
            proxy_pass              http://hasura;
        }
    }
}
